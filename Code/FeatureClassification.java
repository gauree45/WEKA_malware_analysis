import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.Random;

import com.opencsv.CSVReader;

import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.trees.J48;
import weka.core.Instances;

public class FeatureClassification {
	public void createfeaturearff(String path) throws IOException {
		System.out.println("In create function");
		BufferedReader reader = null;
		try {
			reader = new BufferedReader(new FileReader(path + "\\features.csv"));
		} catch (FileNotFoundException e) {
			System.out.println("The features.csv file does not exist");
			e.printStackTrace();
			return;
		}

		FileWriter writer = new FileWriter(path + "\\features.arff");
		BufferedWriter arffwriter = new BufferedWriter(writer);
		arffwriter.write("@relation APPLICATION_MANIFEST_ATTRIBUTES");
		arffwriter.newLine();
		arffwriter.newLine();
		String header = reader.readLine();
		String[] attribute_list = header.split(",");
		for (int i = 0; i < attribute_list.length; i++) {
			arffwriter.write("@attribute " + attribute_list[i] + " {yes,no}");
			arffwriter.newLine();
		}
		arffwriter.newLine();
		arffwriter.newLine();
		arffwriter.write("@data");
		String data;
		while ((data = reader.readLine()) != null) {
			arffwriter.newLine();
			arffwriter.write(data);

		}
		arffwriter.close();
		reader.close();

	}

	public void classifyNaiveBayes(String path) throws Exception {
		String arffpath = path + "//features.arff";

		if (new File(arffpath).exists() == false) {
			createfeaturearff(path);
		}
		BufferedReader buffer = null;
		buffer = new BufferedReader(new FileReader(arffpath));
		Instances train = new Instances(buffer);

		train.setClassIndex(train.numAttributes() - 1);
		buffer.close();

		NaiveBayes nB = new NaiveBayes();

		nB.buildClassifier(train);

		Evaluation eval = new Evaluation(train);
		eval.crossValidateModel(nB, train, 10, new Random(1));

		System.out.println(eval.toSummaryString());

	}

	public void classifyJ48Trees(String path) throws Exception {
		String arffpath = path + "//features.arff";

		if (new File(arffpath).exists() == false) {
			createfeaturearff(path);
		}
		BufferedReader buffer = null;
		buffer = new BufferedReader(new FileReader(arffpath));
		Instances train = new Instances(buffer);
		train.setClassIndex(train.numAttributes() - 1);
		buffer.close();

		J48 JT = new J48();
		JT.buildClassifier(train);

		Evaluation eval = new Evaluation(train);
		eval.crossValidateModel(JT, train, 10, new Random(1));

		System.out.println(eval.toSummaryString());

	}
}