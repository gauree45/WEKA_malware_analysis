import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import java.util.ArrayList;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.opencsv.CSVWriter;

public class FeatureExtraction {
	private String[] Feature_List;  /*
									 * Stores the list of features from the
									 * features.txt
									 */
	private int Feature_count;        /*
								      * Counts the number of features from the
								      * features.txt
								      */
	private String featurecsvpath;

	public FeatureExtraction() {
		Feature_count = 0;
		featurecsvpath = "";
	}

	/*
	 * This function creates features.csv file with the first row as the feature
	 * names
	 */
	public int CreateFeatureCSV(String path, String feature_DB)
			throws Exception {
		boolean featurenotover = true;
		String feature;
		Feature_count = getFeature_count(feature_DB);
		Feature_List = new String[Feature_count];
		CSVWriter csvOutput;
		FileReader read_file = null;
		featurecsvpath = path + "\\features.csv";

		if (Feature_count > 0)

		{
			read_file = new FileReader(feature_DB);

		}

		BufferedReader reader = new BufferedReader(read_file);

		int i = 0;
		while (featurenotover) {
			feature = reader.readLine();

			if (feature != null) {
				Feature_List[i] = feature;
				i++;
			} else
				featurenotover = false;

		}

		if (new File(featurecsvpath).exists()) {

			reader.close();
			return 0;
		}

		else {
			csvOutput = new CSVWriter(new FileWriter(featurecsvpath, true));

			csvOutput.writeNext(Feature_List, true);
			reader.close();
			csvOutput.close();
		}
		return 1;
	}

	/*
	 * This function generates the feature vector by comparing extracting the
	 * features from the xml file
	 */
	public void generateFeatureVector(String xmlpath, boolean malware,
			String name) throws Exception {
		File XmlFile = new File(xmlpath);

		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
		Document doc = null;
		try {
			doc = dBuilder.parse(XmlFile);

		} catch (Exception e) {

			return;
		}

		doc.getDocumentElement().normalize();

		NodeList nList = doc.getElementsByTagName("uses-permission");

		ArrayList<String> feature_vector = new ArrayList<>();
		Pattern pattern = Pattern.compile("android.permission.(.*)");
		Matcher matcher = null;
		Node n = null;

		for (int i = 0; i < nList.getLength(); i++) {

			n = nList.item(i);
			String s = n.getAttributes().getNamedItem("android:name")
					.getNodeValue();
			matcher = pattern.matcher(s);

			if (matcher.matches()) {
				feature_vector.add(matcher.group(1));
		
			}

		}

		/* Write to the feature vector if it is a malware or not" */
		if (malware)
			feature_vector.add("isMalware");

		/* Now the feature vector can be written to FeatureCSVfile */

		WriteFeatureCSV(feature_vector);
	}

	public String getFeaturecsvpath() {
		return featurecsvpath;
	}

	/* This function writes the feature vector to the csv file */

	public void WriteFeatureCSV(ArrayList<String> feature_vector)
			throws IOException {

		String[] CSV_Vector = new String[Feature_count];

		CSVWriter csvOutput = new CSVWriter(
				new FileWriter(featurecsvpath, true));

		for (int i = 0; i < Feature_count; i++) {
			CSV_Vector[i] = "no";
			for (int j = 0; j < feature_vector.size(); j++) {

				if (Feature_List[i].equals(feature_vector.get(j))) {
					CSV_Vector[i] = "yes";
					break;
				}

			}

		}

		csvOutput.writeNext(CSV_Vector, true);
		csvOutput.close();

		return;
	}

	public String[] getFeature_List() {
		return Feature_List;
	}

	public int getFeature_count(String feature_DB) {
		int count = 0;
		FileReader read_file = null;
		try {
			read_file = new FileReader(feature_DB);
			BufferedReader reader = new BufferedReader(read_file);
			while (reader.readLine() != null)
				count++;
			reader.close();
		}

		catch (IOException e) {
			System.out
					.println("Kindly Place the Feature_List.txt in C://Manilyzer Folder and try again later");
			e.printStackTrace();
			return 0;
		}

		return count;

	}

}
