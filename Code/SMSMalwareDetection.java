import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class SMSMalwareDetection {

	private boolean[] rule_vector = new boolean[4];

	SMSMalwareDetection() {
		rule_vector[0] = false; /*
								 * set to true if RECEIVE SMS && WRITE SMS
								 * permissions are present in manifest.xml
								 */
		rule_vector[1] = false; /*
								 * set to true if SEND SMS && WRITE SMS
								 * permissions are present in manifest.xml
								 */
		rule_vector[2] = false; /*
								 * set to true if manifest.xml contains high
								 * priority SMS Receivers
								 */
		rule_vector[3] = false; /*
								 * set to true if (Rule1||Rule2)=true and
								 * manifest.xml contains high priority SMS
								 * Receivers
								 */

	}

	public void DetermineSMSMalware(String xmlpath, boolean malware, String name)
			throws Exception {

		File fXmlFile = new File(xmlpath);
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
		Document doc = null;
						try {
			doc = dBuilder.parse(fXmlFile);
		} catch (Exception e) {
			
			return;
		}
		rule_vector[0] = false;
		rule_vector[1] = false;
		rule_vector[2] = false;
		rule_vector[3] = false;
		/* Evaluate Rule 1 */

		rule_vector[0] = EvaluateRule1(doc);
		/* Evaluate Rule 2 */
		rule_vector[1] = EvaluateRule2(doc);
		/* Evaluate Rule 3 */
		rule_vector[2] = EvaluateRule3(doc);
		/* Evaluate Rule 4 */
		if (rule_vector[0] || rule_vector[1] || rule_vector[2])
		{   
			System.out.println(name);
		}
	}

	public boolean EvaluateRule1(Document doc) throws Exception {
		int count = 0;

		XPath xpath = XPathFactory.newInstance().newXPath();
		// XPath Query for showing all nodes value
		XPathExpression expr = xpath.compile("/manifest/uses-permission");

		Object result = expr.evaluate(doc, XPathConstants.NODESET);
		NodeList nodelist = (NodeList) result;
		Node node = null;
		for (int i = 0; i < nodelist.getLength(); i++) {
			node = nodelist.item(i);
			String s = node.getAttributes().getNamedItem("android:name")
					.getNodeValue();
			if (s.equals("android.permission.RECEIVE_SMS"))

				count++;

			if (s.equals("android.permission.WRITE_SMS"))
				count++;
		}
		if (count == 2)
			return true;
		else
			return false;

	}

	public boolean EvaluateRule2(Document doc) throws Exception {
		int count = 0;
		XPath xpath = XPathFactory.newInstance().newXPath();
		// XPath Query for showing all nodes value
		XPathExpression expr = xpath.compile("/manifest/uses-permission");

		Object result = expr.evaluate(doc, XPathConstants.NODESET);
		NodeList nodelist = (NodeList) result;
		Node node = null;
		for (int i = 0; i < nodelist.getLength(); i++) {
			node = nodelist.item(i);
			String s = node.getAttributes().getNamedItem("android:name")
					.getNodeValue();
			if (s.equals("android.permission.SEND_SMS"))

				count++;

			if (s.equals("android.permission.WRITE_SMS"))
				count++;
		}
		if (count == 2)
			return true;
		else
			return false;

	}

	public boolean EvaluateRule3(Document doc) throws Exception {
		XPath xpath = XPathFactory.newInstance().newXPath();
		// XPath Query for showing all nodes value
		XPathExpression expr = xpath
				.compile("/manifest/application/receiver/intent-filter/action");

		Object result = expr.evaluate(doc, XPathConstants.NODESET);
		NodeList nodelist = (NodeList) result;
		Node node = null;
		if (nodelist.getLength() > 0) {
			for (int i = 0; i < nodelist.getLength(); i++) {
				node = nodelist.item(i);
				String s1 = null;
				if (node.getParentNode().getAttributes()
						.getNamedItem("android:priority") != null) {
					s1 = node.getParentNode().getAttributes()
							.getNamedItem("android:priority").getNodeValue();
				}
				String s = node.getAttributes().getNamedItem("android:name")
						.getNodeValue();
				if (s1 != null && Integer.parseInt(s1) > 0
						&& s.equals("android.provider.Telephony.SMS_RECEIVED"))

					return true;

			}
		}
		return false;

	}
}
